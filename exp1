#include <iostream>
#include <Vector>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <ctime>

class Complex {
public:
    double real;
    double imag;

    Complex(double r = 0, double i = 0) : real(r), imag(i) {}

    double modulus() const {
        return sqrt(real * real + imag * imag);
    }

    bool operator==(const Complex& other) const {
        return real == other.real && imag == other.imag;
    }

    bool operator<(const Complex& other) const {
        if (modulus() == other.modulus()) {
            return real < other.real;
        }
        return modulus() < other.modulus();
    }
};

void shuffle(std::vector<Complex>& vec) {
    std::srand(std::time(0));
    for (size_t i = 0; i < vec.size(); ++i) {
        size_t j = std::rand() % vec.size();
        std::swap(vec[i], vec[j]);
    }
}

bool find(const std::vector<Complex>& vec, const Complex& num) {
    return std::find(vec.begin(), vec.end(), num) != vec.end();
}

void insert(std::vector<Complex>& vec, const Complex& num) {
    vec.push_back(num);
}

void remove(std::vector<Complex>& vec, const Complex& num) {
    vec.erase(std::remove(vec.begin(), vec.end(), num), vec.end());
}

void unique(std::vector<Complex>& vec) {
    vec.erase(std::unique(vec.begin(), vec.end()), vec.end());
}

void bubbleSort(std::vector<Complex>& vec) {
    bool swapped;
    do {
        swapped = false;
        for (size_t i = 1; i < vec.size(); ++i) {
            if (vec[i - 1] > vec[i]) {
                std::swap(vec[i - 1], vec[i]);
                swapped = true;
            }
        }
    } while (swapped);
}

void merge(std::vector<Complex>& vec, size_t left, size_t mid, size_t right) {
    std::vector<Complex> temp(right - left + 1);
    size_t i = left, j = mid + 1, k = 0;
    while (i <= mid && j <= right) {
        if (vec[i] < vec[j]) {
            temp[k++] = vec[i++];
        } else {
            temp[k++] = vec[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = vec[i++];
    }
    while (j <= right) {
        temp[k++] = vec[j++];
    }
    for (i = left, k = 0; i <= right; ++i, ++k) {
        vec[i] = temp[k];
    }
}

void mergeSort(std::vector<Complex>& vec, size_t left, size_t right) {
    if (left < right) {
        size_t mid = left + (right - left) / 2;
        mergeSort(vec, left, mid);
        mergeSort(vec, mid + 1, right);
        merge(vec, left, mid, right);
    }
}

std::vector<Complex> rangeSearch(const std::vector<Complex>& vec, double m1, double m2) {
    std::vector<Complex> result;
    for (const auto& num : vec) {
        if (num.modulus() >= m1 && num.modulus() < m2) {
            result.push_back(num);
        }
    }
    return result;
}

int main() {
    std::vector<Complex> vec = {Complex(1, 2), Complex(3, 4), Complex(5, 6), Complex(7, 8), Complex(1, 2)};
    Complex num(1, 2);

    std::cout << "Original vector: ";
    for (const auto& c : vec) {
        std::cout << "(" << c.real << ", " << c.imag << ") ";
    }
    std::cout << std::endl;

    shuffle(vec);
    std::cout << "Shuffled vector: ";
    for (const auto& c : vec) {
        std::cout << "(" << c.real << ", " << c.imag << ") ";
    }
    std::cout << std::endl;

    if (find(vec, num)) {
        std::cout << "Number (1, 2) found in the vector." << std::endl;
    } else {
        std::cout << "Number (1, 2) not found in the vector." << std::endl;
    }

    insert(vec, Complex(9, 10));
    std::cout << "Vector after insertion: ";
    for (const auto& c : vec) {
        std::cout << "(" << c.real << ", " << c.imag << ") ";
    }
    std::cout << std::endl;

    remove(vec, num);
    std::cout << "Vector after removal: ";
    for (const auto& c : vec) {
        std::cout << "(" << c.real << ", " << c.imag << ") ";
    }
    std::cout << std::endl;

    unique(vec);
    std::cout << "Vector after unique: ";
    for (const auto& c : vec) {
        std::cout << "(" << c.real << ", " << c.imag << ") ";
    }
    std::cout << std::endl;

    std::clock_t start = std::clock();
    bubbleSort(vec);
    std::clock_t end = std::clock();
    std::cout << "Bubble sort time: " << (end - start) / double(CLOCKS_PER_SEC) << " seconds" << std::endl;

    start = std::clock();
    mergeSort(vec, 0, vec.size() - 1);
    end = std::clock();
    std::cout << "Merge sort time: " << (end - start) / double(CLOCKS_PER_SEC) << " seconds" << std::endl;

    auto result = rangeSearch(vec, 5, 10);
    std::cout << "Range search result: ";
    for (const auto& c : result) {
        std::cout << "(" << c.real << ", " << c.imag << ") ";
    }
    std::cout << std::endl;
    return 0;
}
