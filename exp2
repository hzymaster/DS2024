#include <iostream>
#include <stack>
#include <string>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <limits>
using namespace std;
//2. 基于优先级表实现的字符串计算器
#define N_OPTR 9 
 typedef enum {ADD, SUB, MUL, DIV, POW, FAC, L_P, R_P, EOE} Operator;     
 const char pri[N_OPTR][N_OPTR] = { 
/* |-------------- 前运算符 --------------| */
/* + - * / ^ ! ( ) \0 */
 /* -- + */ '>', '>', '<', '<', '<', '<', '<', '>', '>',
 /* | - */ '>', '>', '<', '<', '<', '<', '<', '>', '>',
 /* 栈 * */ '>', '>', '>', '>', '<', '<', '<', '>', '>',
 /* 顶 / */ '>', '>', '>', '>', '<', '<', '<', '>', '>',
 /* 运 ^ */ '>', '>', '>', '>', '>', '<', '<', '>', '>',
 /* 算 ! */ '>', '>', '>', '>', '>', '>', ' ', '>', '>',
 /* 符 ( */ '<', '<', '<', '<', '<', '<', '<', '=', ' ',
 /* | ) */ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
 /* -- \0 */ '<', '<', '<', '<', '<', '<', '<', ' ', '='
 };

Stack<double> numStack;  // 操作数栈
Stack<char> opStack;      // 运算符栈
double evaluate(double a, double b, char op) {
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') {
        if (b == 0) throw runtime_error("Division by zero");
        return a / b;
    }
    if (op == '^') return pow(a, b);
    if (op == '!') return tgamma(a + 1); // 阶乘
    throw runtime_error("Invalid operator");
}
int precedence(char op) {
    switch (op) {
        case '+': case '-': return 1;
        case '*': case '/': return 2;
        case '^': return 3;
        case '!': return 4;
        default: return 0;
    }
}
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '!';
}

bool isNumber(char c) {
    return isdigit(c) || c == '.';
}

double calculate(const string &expression) {
    numStack = Stack<double>();
    opStack = Stack<char>();
    string numBuffer;

    for (size_t i = 0; i < expression.size(); ++i) {
        char c = expression[i];

        if (isspace(c)) continue; 
        if (isNumber(c)) {
            numBuffer += c;  
        } else {
            if (!numBuffer.empty()) {
                numStack.push(std::stod(numBuffer));  
                numBuffer.clear();
            }

            if (isOperator(c)) {
                while (!opStack.empty() && precedence(opStack.top()) >= precedence(c)) {
                    double b = numStack.top(); numStack.pop();
                    double a = numStack.top(); numStack.pop();
                    char op = opStack.top(); opStack.pop();
                    numStack.push(evaluate(a, b, op));
                }opStack.push(c);
            } else if (c == '(') { opStack.push(c);} 
            else if (c == ')') {
                while (opStack.top() != '(') {
                    double b = numStack.top(); numStack.pop();
                    double a = numStack.top(); numStack.pop();
                    char op = opStack.top(); opStack.pop();
                    numStack.push(evaluate(a, b, op));
                }
                opStack.pop();  
            }
        }
    }

    if (!numBuffer.empty()) {numStack.push(stod(numBuffer));}
    while (!opStack.empty()) {
        double b = numStack.top(); numStack.pop();
        double a = numStack.top(); numStack.pop();
        char op = opStack.top(); opStack.pop();
        numStack.push(evaluate(a, b, op));
    }
   return numStack.top();
}

// 3. 求柱状图中最大矩形面积

int largestRectangleArea(vector<int>& heights) {
    stack<int> s;
    int max_area = 0;
    int n = heights.size();
    vector<int> left(n, 0);
    vector<int> right(n, n - 1);
    
    // 计算每个柱子左边第一个比它矮的柱子的索引
    for (int i = 0; i < n; i++) {
        while (!s.empty() && heights[s.top()] >= heights[i]) {
            right[s.top()] = i - 1;
            s.pop();
        }
        s.push(i);
    }
    
    // 清空栈，计算每个柱子右边第一个比它矮的柱子的索引
    while (!s.empty()) {
        right[s.top()] = n - 1;
        s.pop();
    }
    
    // 计算最大矩形面积
    for (int i = 0; i < n; i++) {
        max_area = max(max_area, heights[i] * (right[i] - left[i] + 1));
    }
    
    return max_area;
}


int largestRectangleArea(vector<int>& heights) {
    stack<int> s;
    int max_area = 0;
    int n = heights.size();
    
    for (int i = 0; i <= n; i++) {
        int h = (i == n ? 0 : heights[i]);
        while (!s.empty() && (i == n || h < heights[s.top()])) {
            int top = s.top();
            s.pop();
            int height = heights[top];
            int width = (s.empty() ? i : i - s.top() - 1);
            max_area = max(max_area, height * width);
        }
        s.push(i);
    }
    
    return max_area;
}

vector<int> generateRandomHeights(int n) {
    vector<int> heights(n);
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(0, 10000);
    for (int i = 0; i < n; ++i) {
        heights[i] = dis(gen);
    }
    return heights;
}

int main() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(1, 100000);

    for (int i = 0; i < 10; ++i) {
        int n = dis(gen);
        vector<int> heights = generateRandomHeights(n);
        cout << "Input: ";
        for (int h : heights) {
            cout << h << " ";
        }
        cout << endl;
        cout << "Output: " << largestRectangleArea(heights) << endl << endl;
    }
    return 0;
}
